<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="399px" preserveAspectRatio="none" style="width:1736px;height:399px;background:#FFFFFF;" version="1.1" viewBox="0 0 1736 399" width="1736px" zoomAndPan="magnify"><defs/><g><!--MD5=[9d44916250b776386006c440668bcfbb]
class Agent--><g id="elem_Agent"><rect codeLine="8" fill="#F1F1F1" height="129.4844" id="Agent" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="509" x="149" y="40"/><ellipse cx="378.75" cy="56" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M381.7188,61.6406 Q381.1406,61.9375 380.5,62.0781 Q379.8594,62.2344 379.1563,62.2344 Q376.6563,62.2344 375.3281,60.5938 Q374.0156,58.9375 374.0156,55.8125 Q374.0156,52.6875 375.3281,51.0313 Q376.6563,49.375 379.1563,49.375 Q379.8594,49.375 380.5,49.5313 Q381.1563,49.6875 381.7188,49.9844 L381.7188,52.7031 Q381.0938,52.125 380.5,51.8594 Q379.9063,51.5781 379.2813,51.5781 Q377.9375,51.5781 377.25,52.6563 Q376.5625,53.7188 376.5625,55.8125 Q376.5625,57.9063 377.25,58.9844 Q377.9375,60.0469 379.2813,60.0469 Q379.9063,60.0469 380.5,59.7813 Q381.0938,59.5 381.7188,58.9219 L381.7188,61.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="41" x="399.25" y="60.8467">Agent</text><line style="stroke:#181818;stroke-width:0.5;" x1="150" x2="657" y1="72" y2="72"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="157" y="82.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="218" x="169" y="88.9951">mCallback : Callback::SharedPtr</text><line style="stroke:#181818;stroke-width:0.5;" x1="150" x2="657" y1="96.2969" y2="96.2969"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="157" y="106.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="399" x="169" y="113.292">Agent(const Server&amp; server, Callback::SharedPtr callback)</text><ellipse cx="160" cy="126.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="63" x="169" y="129.5889">~Agent()</text><ellipse cx="160" cy="142.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="483" x="169" y="145.8857">create(const Server&amp; server, Callback::SharedPtr callback) : SharedPtr</text><ellipse cx="160" cy="158.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="456" x="169" y="162.1826">doTask(Mode mode, const std::string&amp; task) : std::string {query}</text></g><!--MD5=[687e0e93109a4e3b835e34cee365dc7c]
class Callback--><g id="elem_Callback"><rect codeLine="17" fill="#F1F1F1" height="129.4844" id="Callback" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="659" x="7" y="263"/><ellipse cx="303.75" cy="279" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M306.7188,284.6406 Q306.1406,284.9375 305.5,285.0781 Q304.8594,285.2344 304.1563,285.2344 Q301.6563,285.2344 300.3281,283.5938 Q299.0156,281.9375 299.0156,278.8125 Q299.0156,275.6875 300.3281,274.0313 Q301.6563,272.375 304.1563,272.375 Q304.8594,272.375 305.5,272.5313 Q306.1563,272.6875 306.7188,272.9844 L306.7188,275.7031 Q306.0938,275.125 305.5,274.8594 Q304.9063,274.5781 304.2813,274.5781 Q302.9375,274.5781 302.25,275.6563 Q301.5625,276.7188 301.5625,278.8125 Q301.5625,280.9063 302.25,281.9844 Q302.9375,283.0469 304.2813,283.0469 Q304.9063,283.0469 305.5,282.7813 Q306.0938,282.5 306.7188,281.9219 L306.7188,284.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="57" x="324.25" y="283.8467">Callback</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="665" y1="295" y2="295"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="305.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="633" x="27" y="311.9951">mMessages : std::map&lt;std::chrono::time_point&lt;std::chrono::system_clock&gt;, std::string&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="665" y1="319.2969" y2="319.2969"/><ellipse cx="18" cy="332.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="67" x="27" y="336.292">Callback()</text><ellipse cx="18" cy="349.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="27" y="352.5889">~Callback()</text><ellipse cx="18" cy="365.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="488" x="27" y="368.8857">operator&lt;&lt;(std::ostream&amp; ostr, const Callback&amp; cb) : std :: ostream&amp;</text><ellipse cx="18" cy="381.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="282" x="27" y="385.1826">notify(const std::string&amp; message) : void</text></g><!--MD5=[c60af77fe5573b84a4aa4bce89659574]
class Server--><g id="elem_Server"><rect codeLine="26" fill="#F1F1F1" height="194.6719" id="Server" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="327" x="760" y="7"/><ellipse cx="897.25" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M900.2188,28.6406 Q899.6406,28.9375 899,29.0781 Q898.3594,29.2344 897.6563,29.2344 Q895.1563,29.2344 893.8281,27.5938 Q892.5156,25.9375 892.5156,22.8125 Q892.5156,19.6875 893.8281,18.0313 Q895.1563,16.375 897.6563,16.375 Q898.3594,16.375 899,16.5313 Q899.6563,16.6875 900.2188,16.9844 L900.2188,19.7031 Q899.5938,19.125 899,18.8594 Q898.4063,18.5781 897.7813,18.5781 Q896.4375,18.5781 895.75,19.6563 Q895.0625,20.7188 895.0625,22.8125 Q895.0625,24.9063 895.75,25.9844 Q896.4375,27.0469 897.7813,27.0469 Q898.4063,27.0469 899,26.7813 Q899.5938,26.5 900.2188,25.9219 L900.2188,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="44" x="917.75" y="27.8467">Server</text><line style="stroke:#181818;stroke-width:0.5;" x1="761" x2="1086" y1="39" y2="39"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="768" y="49.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="780" y="55.9951">mStatus : Status</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="768" y="65.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="301" x="780" y="72.292">mConditionVariable : std::condition_variable</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="768" y="82.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="143" x="780" y="88.5889">mMutex : std::mutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="768" y="98.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="301" x="780" y="104.8857">mThreadPtr : std::unique_ptr&lt;std::thread&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="761" x2="1086" y1="112.1875" y2="112.1875"/><ellipse cx="771" cy="125.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="54" x="780" y="129.1826">Server()</text><ellipse cx="771" cy="142.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="66" x="780" y="145.4795">~Server()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="768" y="155.4297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="780" y="161.7764">run() : void</text><ellipse cx="771" cy="174.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="780" y="178.0732">start() : void</text><ellipse cx="771" cy="191.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="780" y="194.3701">stop() : void</text></g><!--MD5=[d86ddd7e72dda5be0ef89798c539d6ec]
class Agent::Mode--><g id="elem_Agent::Mode"><rect codeLine="39" fill="#F1F1F1" height="80.5938" id="Agent::Mode" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="122" x="701.25" y="287"/><ellipse cx="716.25" cy="303" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M720.3594,309 L712.6406,309 L712.6406,296.6094 L720.3594,296.6094 L720.3594,298.7656 L715.0938,298.7656 L715.0938,301.4375 L719.8594,301.4375 L719.8594,303.5938 L715.0938,303.5938 L715.0938,306.8438 L720.3594,306.8438 L720.3594,309 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="730.25" y="307.8467">Agent::Mode</text><line style="stroke:#181818;stroke-width:0.5;" x1="702.25" x2="822.25" y1="319" y2="319"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="41" x="707.25" y="335.9951">Async</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="59" x="707.25" y="352.292">Blocking</text><line style="stroke:#181818;stroke-width:0.5;" x1="702.25" x2="822.25" y1="359.5938" y2="359.5938"/></g><!--MD5=[d9a7c2c8011ee60fa59415266aa6c258]
class Server::Status--><g id="elem_Server::Status"><rect codeLine="45" fill="#F1F1F1" height="113.1875" id="Server::Status" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="130" x="858.25" y="271"/><ellipse cx="873.25" cy="287" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M877.3594,293 L869.6406,293 L869.6406,280.6094 L877.3594,280.6094 L877.3594,282.7656 L872.0938,282.7656 L872.0938,285.4375 L876.8594,285.4375 L876.8594,287.5938 L872.0938,287.5938 L872.0938,290.8438 L877.3594,290.8438 L877.3594,293 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="887.25" y="291.8467">Server::Status</text><line style="stroke:#181818;stroke-width:0.5;" x1="859.25" x2="987.25" y1="303" y2="303"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="20" x="864.25" y="319.9951">Init</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="864.25" y="336.292">Run</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="32" x="864.25" y="352.5889">Start</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="32" x="864.25" y="368.8857">Stop</text><line style="stroke:#181818;stroke-width:0.5;" x1="859.25" x2="987.25" y1="376.1875" y2="376.1875"/></g><!--MD5=[644b5eb9c16c6c1d603327159cdb92d3]
class scoped_logger--><g id="elem_scoped_logger"><rect codeLine="53" fill="#F1F1F1" height="113.1875" id="scoped_logger" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="607" x="1122" y="48"/><ellipse cx="1369.75" cy="64" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1372.7188,69.6406 Q1372.1406,69.9375 1371.5,70.0781 Q1370.8594,70.2344 1370.1563,70.2344 Q1367.6563,70.2344 1366.3281,68.5938 Q1365.0156,66.9375 1365.0156,63.8125 Q1365.0156,60.6875 1366.3281,59.0313 Q1367.6563,57.375 1370.1563,57.375 Q1370.8594,57.375 1371.5,57.5313 Q1372.1563,57.6875 1372.7188,57.9844 L1372.7188,60.7031 Q1372.0938,60.125 1371.5,59.8594 Q1370.9063,59.5781 1370.2813,59.5781 Q1368.9375,59.5781 1368.25,60.6563 Q1367.5625,61.7188 1367.5625,63.8125 Q1367.5625,65.9063 1368.25,66.9844 Q1368.9375,68.0469 1370.2813,68.0469 Q1370.9063,68.0469 1371.5,67.7813 Q1372.0938,67.5 1372.7188,66.9219 L1372.7188,69.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="1390.25" y="68.8467">scoped_logger</text><line style="stroke:#181818;stroke-width:0.5;" x1="1123" x2="1728" y1="80" y2="80"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1130" y="90.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="155" x="1142" y="96.9951">_ss : std::stringstream</text><line style="stroke:#181818;stroke-width:0.5;" x1="1123" x2="1728" y1="104.2969" y2="104.2969"/><ellipse cx="1133" cy="117.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="581" x="1142" y="121.292">scoped_logger(const std::string&amp; className, const char* funcName, unsigned line)</text><ellipse cx="1133" cy="134.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="1142" y="137.5889">~scoped_logger()</text><ellipse cx="1133" cy="150.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="202" x="1142" y="153.8857">stream() : std::stringstream&amp;</text></g><!--MD5=[32da3ac056e6283a39113d8a5f9348d9]
reverse link Agent to Callback--><g id="link_Agent_Callback"><path codeLine="71" d="M380.104,181.846 C372.087,208.293 363.191,237.634 355.519,262.941 " fill="none" id="Agent-backto-Callback" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="383.961,169.126,378.3923,173.7074,380.4794,180.6098,386.0482,176.0284,383.961,169.126" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f7074028f67aa9920d603f0887723f07]
reverse link Agent to Agent::Mode--><g id="link_Agent_Agent::Mode"><path codeLine="80" d="M539.55,176.412 C585.818,201.991 637.182,232.086 682.25,262.5 C693.307,269.962 704.752,278.545 715.409,286.952 " fill="none" id="Agent-backto-Agent::Mode" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="533.3395" cy="172.999" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="540.3511" x2="526.328" y1="176.8511" y2="169.147"/><line style="stroke:#181818;stroke-width:1.0;" x1="529.4875" x2="537.1916" y1="180.0106" y2="165.9875"/></g><!--MD5=[9ace9c1ccb22c4f34614b3bc72ca349a]
reverse link Server to Server::Status--><g id="link_Server_Server::Status"><path codeLine="83" d="M923.25,217.309 C923.25,235.86 923.25,254.362 923.25,270.722 " fill="none" id="Server-backto-Server::Status" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="923.25" cy="210.112" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="923.25" x2="923.25" y1="218.112" y2="202.112"/><line style="stroke:#181818;stroke-width:1.0;" x1="915.25" x2="931.25" y1="210.112" y2="210.112"/></g><!--MD5=[afdd3d2a54622738fa80a0e32ba3cc60]
@startuml





/' Objects '/

class Agent {
    -Agent(const Server& server, Callback::SharedPtr callback)
    +~Agent()
    -mCallback : Callback::SharedPtr
    +{static} create(const Server& server, Callback::SharedPtr callback) : SharedPtr
    +doTask(Mode mode, const std::string& task) : std::string {query}
}


class Callback {
    +Callback()
    +~Callback()
    +operator<<(std::ostream& ostr, const Callback& cb) : std :: ostream&
    -mMessages : std::map<std::chrono::time_point<std::chrono::system_clock>, std::string>
    +notify(const std::string& message) : void
}


class Server {
    +Server()
    +~Server()
    -mStatus : Status
    -mConditionVariable : std::condition_variable
    -mMutex : std::mutex
    -mThreadPtr : std::unique_ptr<std::thread>
    -run() : void
    +start() : void
    +stop() : void
}


enum Agent::Mode {
    Async
    Blocking
}


enum Server::Status {
    Init
    Run
    Start
    Stop
}


class scoped_logger {
    +scoped_logger(const std::string& className, const char* funcName, unsigned line)
    +~scoped_logger()
    -_ss : std::stringstream
    +stream() : std::stringstream&
}





/' Inheritance relationships '/




/' Aggregation relationships '/

.Agent *- - .Callback






/' Nested objects '/

.Agent +- - .Agent::Mode


.Server +- - .Server::Status




@enduml

@startuml






class Agent {
    -Agent(const Server& server, Callback::SharedPtr callback)
    +~Agent()
    -mCallback : Callback::SharedPtr
    +{static} create(const Server& server, Callback::SharedPtr callback) : SharedPtr
    +doTask(Mode mode, const std::string& task) : std::string {query}
}


class Callback {
    +Callback()
    +~Callback()
    +operator<<(std::ostream& ostr, const Callback& cb) : std :: ostream&
    -mMessages : std::map<std::chrono::time_point<std::chrono::system_clock>, std::string>
    +notify(const std::string& message) : void
}


class Server {
    +Server()
    +~Server()
    -mStatus : Status
    -mConditionVariable : std::condition_variable
    -mMutex : std::mutex
    -mThreadPtr : std::unique_ptr<std::thread>
    -run() : void
    +start() : void
    +stop() : void
}


enum Agent::Mode {
    Async
    Blocking
}


enum Server::Status {
    Init
    Run
    Start
    Stop
}


class scoped_logger {
    +scoped_logger(const std::string& className, const char* funcName, unsigned line)
    +~scoped_logger()
    -_ss : std::stringstream
    +stream() : std::stringstream&
}










.Agent *- - .Callback







.Agent +- - .Agent::Mode


.Server +- - .Server::Status




@enduml

PlantUML version 1.2022.7(Mon Aug 22 19:01:30 CEST 2022)
(EPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>