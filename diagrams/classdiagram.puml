@startuml





/' Objects '/

class Receipt {
	+Receipt(Mode mode)
	+getEndTime() : ChronotTime_t& {query}
	+getStartTime() : ChronotTime_t& {query}
	-mMode : Mode
	-mStatus : Status
	+getTaskId() : TaskId {query}
	+getExecutionMode() : int {query}
	+getStatus() : int {query}
	-mEndTime : time_point<std::chrono::system_clock>
	-mStartTime : time_point<std::chrono::system_clock>
	-mTaskId : uint32_t
	+setEndTime() : void
	+setStatus(Status status) : void
}


enum Receipt::Mode {
	Async
	Blocking
}


enum Receipt::Status {
	FAIL
	OK
}


class scoped_logger {
	+scoped_logger(const std::string& className, const char* funcName, unsigned line)
	+~scoped_logger()
	-_ss : std::stringstream
	+stream() : std::stringstream&
}


namespace cmder {
	class Callback {
		+Callback()
		+~Callback()
		-mMutex : mutable std::mutex
		+messagesSize() : size_t {query}
		+operator<<(std::ostream& ostr, const Callback::SharedPtr& cb) : std :: ostream&
		+getFirst(const Receipt& receipt, Type type) : std::optional<Message_t>
		+waitFirst(const Receipt& receipt, Type type) : std::optional<Message_t>
		-mOwnerName : std::string
		-mMessages : std::vector<Message_t>
		+clear() : void
		+notify(TaskId taskId, Type type, const std::string& message) : void
		+setOwner(const std::string& owner) : void
	}

	abstract class IControllableThread {
		+{abstract} getStatus() : int {query}
		+{abstract} start() : void
		+{abstract} stop() : void
	}

	abstract class IStatProvider {
		+{abstract} statNotification(const std::string& notificationName) : uint64_t {query}
	}

	enum Callback::Type {
		NOTIFICATION
		RESULT
	}

	enum Status {
		Init
		Run
		Start
		Stop
	}

	class Callback::Message_t {
		+mTime : Receipt::ChronotTime_t
		+mTaskId : TaskId
		+mType : Type
		+mText : std::string
	}

	namespace tst {
		class AgentTest {
			#{static} sServer : Server
			#{static} sAsyncAgent : static Agent::SharedPtr
			#{static} sNoCallbackAgent : static Agent::SharedPtr
			#{static} sCallback : static Callback::SharedPtr
			#SetUp() : void
			#{static} SetUpTestSuite() : void
			#{static} TearDownTestSuite() : void
		}

		class ServerTest {
			#mServer : std::unique_ptr<Server>
			#SetUp() : void
			#{static} SetUpTestSuite() : void
			#TearDown() : void
			#{static} TearDownTestSuite() : void
		}
	}

	namespace srv {
		class Server {
			+Server()
			+~Server()
			+getStatus() : Status {query}
			-mStatus : Status
			-mAgents : map<AgentName_t, AgentInfo>
			-mMutex : mutable std::mutex
			-mConditionVariable : std::condition_variable
			-mNotificationStatistics : std::map<std::string, uint64_t>
			-mThreadPtr : std::unique_ptr<std::thread>
			+statNotification(const std::string& notificationName) : uint64_t {query}
			+registerAgent(const std::string& agentName, const Callback::SharedPtr& callback) : void
			-run() : void
			+start() : void
			+stop() : void
			+unregisterAgent(const std::string& agentName) : void
			-unregisterAgentUnsafe(const std::string& agentName) : void
		}

		class Server::AgentInfo {
			+AgentInfo(string n, const Callback::SharedPtr& sp)
			+mCallback : Callback::WeakPtr
			+mHasCallback : bool
			+mAgentName : string
		}
	}

	namespace agent {
		class Agent {
			-Agent(Server server, Callback::SharedPtr callback)
			+~Agent()
			-mCallbackAgent : Callback::SharedPtr
			-mCallbackUser : Callback::WeakPtr
			+doTask(Receipt::Mode mode, const TaskName& task, std::string& result) : Receipt {query}
			-mServer : Server
			+{static} create(Server server, Callback::SharedPtr callback) : SharedPtr
			+getStatus() : Status {query}
			-mStatus : Status
			-mMutex : mutable std::mutex
			-mConditionVariable : std::condition_variable
			-mDebugName : std::string
			+getName() : std::string& {query}
			-mThreadPtr : std::unique_ptr<std::thread>
			+statNotification(const std::string& notificationName) : uint64_t {query}
			+registerAgent() : void
			-run() : void
			+start() : void
			+stop() : void
			+unregisterAgent() : void
		}

		class Task {
			-mTaskConfiguration : std::vector<TaskConfig>
		}

		enum TaskName {
			BlockMe_3s
			Pi
			PingMe_5x
		}

		class Task::TaskConfig {
		}
	}
}





/' Inheritance relationships '/

cmder.IControllableThread <|-- cmder.agent.Agent


cmder.IControllableThread <|-- cmder.srv.Server


cmder.IStatProvider <|-- cmder.agent.Agent


cmder.IStatProvider <|-- cmder.srv.Server





/' Aggregation relationships '/

cmder.agent.Agent "2" *-- cmder.Callback


cmder.agent.Agent *-- cmder.srv.Server


cmder.agent.Agent *-- cmder.Status


cmder.tst.AgentTest "2" *-- cmder.agent.Agent


cmder.tst.AgentTest *-- cmder.Callback


cmder.tst.AgentTest *-- cmder.srv.Server


cmder.Callback::Message_t *-- .Receipt


.Receipt *-- cmder.Status


cmder.srv.Server *-- cmder.Status


cmder.srv.Server::AgentInfo *-- cmder.Callback


cmder.tst.ServerTest *-- cmder.srv.Server






/' Nested objects '/

cmder.Callback +-- cmder.Callback::Message_t


cmder.Callback +-- cmder.Callback::Type


.Receipt +-- .Receipt::Mode


.Receipt +-- .Receipt::Status


cmder.srv.Server +-- cmder.srv.Server::AgentInfo


cmder.agent.Task +-- cmder.agent.Task::TaskConfig




@enduml
